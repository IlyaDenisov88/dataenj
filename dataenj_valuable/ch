-- Общий вид запроса в ClickHouse
CREATE TABLE [IF NOT EXISTS] [db.]table_name 
(
    name1 [type1] [DEFAULT|MATERIALIZED|ALIAS expr1] [TTL expr1],
    name2 [type2] [DEFAULT|MATERIALIZED|ALIAS expr2] [TTL expr2],
    ...
    INDEX index_name1 expr1 TYPE type1(...) GRANULARITY value1,
    INDEX index_name2 expr2 TYPE type2(...) GRANULARITY value2
) ENGINE = MergeTree()
ORDER BY expr

CREATE TABLE default.test(
    id UInt32,
    column1 String,
    column2 String
)
ENGINE = MergeTree() 
ORDER BY id;
-- ENGINE выбранный движок таблицы (он требует указания сортировки)

INSERT INTO default.test
    (id, column1, column2)
VALUES
    (1, 'A', 'abc'),
    (2, 'A', 'def'),
    (3, 'B', 'abc'),
    (4, 'B', 'def');
    
   
-- VIEW - сохраненный запрос
CREATE VIEW my_view AS
SELECT column1, column2
FROM my_table
WHERE column1 > 100;

-- Materialized view (чтобы выполнять запрос в процессе вставки данных, а не дожидаться их полной вставки) 
CREATE MATERIALIZED VIEW my_materialized_view
TO my_aggregated_table
ENGINE = MergeTree()
AS
SELECT column1, COUNT(*)
FROM my_table
GROUP BY column1;

-- общий вид запроса для создания материализованного представления
CREATE MATERIALIZED VIEW [IF NOT EXISTS] [db.]view_name
[ENGINE = engine_name]
[PARTITION BY expr]
[ORDER BY expr]
[PRIMARY KEY expr]
AS SELECT ...;

-- движок MergeTree
CREATE TABLE default.sales_merge_tree
(
    date Date,
    product String,
    quantity UInt32,
    price Float32,
    order_id UInt32
) ENGINE = MergeTree
ORDER BY date;

INSERT INTO default.sales_merge_tree (date, product, quantity, price, order_id) VALUES
('2023-05-01', 'Widget A', 10, 5.0, 1),
('2023-05-01', 'Widget A', 15, 4.5, 2),
('2023-05-02', 'Gadget B', 20, 10.0, 3);

--Для каждого запроса INSERT ClickHouse создает отдельную папку внутри себя (поэтому кстати и нужно вставлять редко и "по много"). 
--В каждой из этих папок происходит упорядочивание данных по указанному ключу сортировки - сортирование по сути, а потом "в фоне" 
--ClickHouse начинает все это оптимизировать своими алгоритмами, поэтому движок и называется MergeTree - дерево слияния: множество 
--сортированных данных, по сортированным папкам сливаются единую базу по некоторым правилам.

-- движок SummingMergeTree - автоматическое суммирование при слиянии по определенным столбцам

CREATE TABLE default.sales_summing_merge_tree
(
    date Date,
    product String,
    quantity UInt32
) ENGINE = SummingMergeTree()
ORDER BY date;

INSERT INTO sales_summing_merge_tree (date, product, quantity) VALUES
('2023-05-01', 'Widget A', 10),
('2023-05-02', 'Gadget B', 20),
('2023-05-01', 'Widget A', 11),
('2023-05-02', 'Gadget B', 22),
('2023-05-01', 'Widget A', 12),
('2023-05-02', 'Gadget B', 23);

SELECT * FROM sales_summing_merge_tree;

-- движок AggregatingMergeTree - агрегация на уровне данных
-- совместно с Materialized View используется для создания витрин данных. 
CREATE TABLE sales_raw    -- таблица продаж чего-то 
(
    date_sale Date,       -- Дата продажи
    product_id UInt32,    -- Идентификатор продукта (будет 1 и 2)
    quantity UInt32,      -- Количество проданных единиц
    price Float32         -- Цена за единицу товара 
) ENGINE = MergeTree()
ORDER BY date_sale;


--Теперь самое важное, создаем материализованное представление, которое будет суммировать количество проданных товаров и общую сумму продаж. 
--Вот тут SELECT и содержит в себе то, что мы хотим получать.  
--Почитайте запрос внимательно, и обратите внимание где указывается движок:
CREATE MATERIALIZED VIEW sales_mv
ENGINE = AggregatingMergeTree()
ORDER BY (date_sale, product_id) 
AS
SELECT
    date_sale, -- Дата продажи
    product_id, -- Идентификатор продукта
    sumState(quantity) AS total_quantity, -- Суммарное количество (агрегация по датам и id продукта)
    sumState(quantity * price) AS total_cost -- Суммарная стоимость проданных товаров (количество * цену)
FROM sales_raw
GROUP BY date_sale, product_id;

-- первая порция данных
INSERT INTO sales_raw 
VALUES 
    ('2024-06-01', 1, 10, 100.0),
    ('2024-06-01', 1, 7, 100.0),
    ('2024-06-01', 2, 25, 200.0),
    ('2024-06-01', 2, 3, 200.0),
    ('2024-06-01', 2, 8, 200.0),
    ('2024-06-01', 1, 6, 100.0),
    ('2024-06-01', 2, 2, 200.0),
    ('2024-06-01', 2, 12, 200.0),
    ('2024-06-01', 2, 21, 200.0),
    ('2024-06-01', 1, 7, 100.0),
    ('2024-06-01', 2, 20, 200.0),
    ('2024-06-01', 2, 33, 200.0),
    ('2024-06-01', 2, 28, 200.0),
    ('2024-06-01', 1, 7, 100.0);

-- Вот как выглядит результат, смотрим данные в sales_mw через запрос 
--(помним про использование sumMerge -иначе каждая порция будет вставляться отдельной суммированной строкой):
SELECT 
    date_sale, 
    product_id, 
    sumMerge(total_quantity) AS total_quantity, 
    sumMerge(total_cost) AS total_cost 
FROM 
    sales_mv 
GROUP BY 
    date_sale, product_id;

-- вторая порция данных
INSERT INTO sales_raw 
VALUES 
    ('2024-06-02', 1, 3, 100.0),
    ('2024-06-02', 1, 22, 100.0),
    ('2024-06-02', 2, 5, 200.0),
    ('2024-06-02', 2, 43, 200.0),
    ('2024-06-02', 2, 2, 200.0),
    ('2024-06-02', 1, 4, 100.0),
    ('2024-06-02', 2, 26, 200.0),
    ('2024-06-02', 2, 2, 200.0),
    ('2024-06-02', 2, 1, 200.0),
    ('2024-06-02', 1, 37, 100.0),
    ('2024-06-02', 2, 2, 200.0),
    ('2024-06-02', 2, 12, 200.0),
    ('2024-06-02', 2, 3, 200.0),
    ('2024-06-02', 1, 15, 100.0);

-- просмотр представления
SELECT 
    date_sale, 
    product_id, 
    sumMerge(total_quantity) AS total_quantity, 
    sumMerge(total_cost) AS total_cost 
FROM 
    sales_mv 
GROUP BY 
    date_sale, product_id;
    
-- движок ReplacingMergeTree
CREATE TABLE default.replacing_MT
(
    key Int64,
    event_name String,
    eventTime DateTime
)
ENGINE = ReplacingMergeTree
ORDER BY key;
   
--Добавим строки с данными (обращаем внимание на название и на дату), выполнив запросы поочередно:
INSERT INTO replacing_MT Values (1, 'первая вставка', '2024-03-03 03:03:03');
INSERT INTO replacing_MT Values (1, 'вторая вставка', '2023-01-01 00:00:00');
INSERT INTO replacing_MT Values (1, 'третья вставка', '2021-12-31 19:00:00');
   
--А для того чтобы сделать слияние данных принудительно, то есть увидеть сразу как работает движок, мы добавляем к запросу модификатор FINAL. 
--ВАЖНО! Это очень неэффективный способ выбора данных. Не используйте его для больших таблиц. Нормальный режим работы любого движка - в фоне.
SELECT * FROM replacing_MT FINAL;
-- сохранил самую последнюю запись

-- добавили параметры движка
CREATE TABLE default.replacing_MT_with_param
(
    key Int64,
    event_name String,
    eventTime DateTime
)
ENGINE = ReplacingMergeTree (eventTime)
ORDER BY key;

INSERT INTO replacing_MT_with_param Values (1, 'первая вставка', '2024-03-02 22:03:03');
INSERT INTO replacing_MT_with_param Values (1, 'вторая вставка', '2023-01-01 00:00:00');
INSERT INTO replacing_MT_with_param Values (1, 'третья вставка', '2022-01-01 00:00:00');

SELECT * FROM replacing_MT_with_param FINAL;
-- сохранил первую запись (используется параметр eventTime). Без параметров - последняя по ключу, с параметрами - последняя по параметру

-- движок CollapsingMergeTree
   
CREATE TABLE default.sales_collapsing_merge_tree
(
    date Date,
    product String,
    quantity UInt32,
    price Float32,
    order_id UInt32,
    sign Int8
) ENGINE = CollapsingMergeTree(sign)
ORDER BY date;

--Вставим данные двумя вставками:
INSERT INTO sales_collapsing_merge_tree (date, product, quantity, price, order_id, sign) VALUES
('2023-05-01', 'Widget A', 10, 5.0, 1, 1),
('2023-05-02', 'Gadget B', 20, 10.0, 3, 1);

INSERT INTO sales_collapsing_merge_tree (date, product, quantity, price, order_id, sign) VALUES
('2023-05-01', 'Widget A', 10, 5.0, 1, -1),
('2023-05-01', 'Widget A', 15, 4.5, 2, 1);

SELECT * FROM sales_collapsing_merge_tree FINAL;

--Это произошло, потому что в данных было 2 одинаковых строки, отличающиеся значением столбика sign.
--
--sign: Специальное поле, которое указывает, является ли строка "активной" (1) или "удаленной" (-1). 
--Надо это чтобы сохранять самую свежую информацию при слиянии строк с одинаковыми ключами, используя  столбец sign для определения "свежести".
--
--Движок "схлопнул" данные с противоположными значениями sign. Эта особенность еще используется для удаления строк
--и корректировки вставленных ранее данных - замена UPDATE с учетом специфики работы ClickHouse.

CREATE TABLE default.sales_versioned_collapsing_merge_tree
(
    date Date,
    product String,
    quantity UInt32,
    price Float32,
    order_id UInt32,
    sign Int8,
    version Int8
) ENGINE = VersionedCollapsingMergeTree(sign,version)
ORDER BY date;

INSERT INTO sales_versioned_collapsing_merge_tree (date, product, quantity, price, order_id, sign, version) VALUES
('2023-05-01', 'Widget A', 10, 5.0, 1, 1, 1);

INSERT INTO sales_versioned_collapsing_merge_tree (date, product, quantity, price, order_id, sign, version) VALUES
('2023-05-01', 'Widget A', 10, 5.0, 1, -1, 1),
('2023-05-01', 'Widget A', 15, 4.5, 2, 1, 2);

SELECT * FROM sales_versioned_collapsing_merge_tree FINAL;
